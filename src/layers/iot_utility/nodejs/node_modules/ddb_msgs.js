// Utility to write msgs to DDB
var aws  = require('aws-sdk');

let MSG_TABLE='IOT-MSGS';
// Seconds for expiry time (5 days for testing)
let MSG_EXPIRATION_DURATION = (5*24*60*60);

var _dynoDB= new aws.DynamoDB({apiVersion: 'latest'});
var _dynoDC= new aws.DynamoDB.DocumentClient();

// Return value 'v' if not undefined, else default 'd'
function VoD(v, d) {
    if (v!==undefined) {
        return v;
    }
    return d;
}

// Returns promise or throws error
async function addMsgToTable(id, dir, msg) {
    if (await checkOrCreateTable()) {
        // add to table
        var now = new Date();
            
        var params = {
            TableName:MSG_TABLE,
            Item : {
                'DevName': id, 
                'Timestamp':now.toISOString(), 
                'dir': dir,
                'msgProtocol':VoD(msg.msgProtocol, 'app-core'),
                'appTag':VoD(msg.appTag, 'generic'),
                'nettype':VoD(msg.type, 'lora'),
                'connector':VoD(msg.connector, 'UNKNOWN'),
                'expiryTime' : (now.getTime() + MSG_EXPIRATION_DURATION),
                'netinfo' : (msg.gwInfo!==undefined ? msg.gwInfo : {}),
                'payload' : (msg.payload!==undefined ? msg.payload : {})
            },
        };
        console.log('updating with:'+JSON.stringify(params));
        return new Promise(function(resolve, reject) {
            _dynoDC.put(params, function(err, data) {
                if (err) {
                    console.log('failed to insert message'+err);
                    reject(err);
                } else {
                    resolve(data);
                }
            })    
        });
    }        
    throw new Error('failed to access table');
}

async function checkOrCreateTable() {
    var tdesc = await new Promise(function(resolve, reject) { 
        _dynoDB.describeTable({ 'TableName':MSG_TABLE}, function(err, data) {
            if (err) {
                console.log('failed to find table:'+err);
                resolve(null);
            } else resolve(data);
        });
    });
    if (tdesc===null) {
        // Create table structure on the fly
        var params = {
            TableName : MSG_TABLE,
            KeySchema: [
                { AttributeName: "DevName", KeyType: "HASH"},
                { AttributeName: "Timestamp", KeyType: "RANGE" }
            ],
            AttributeDefinitions: [
                { AttributeName: "DevName", AttributeType: "S" },
                { AttributeName: "Timestamp", AttributeType: "S" }
            ],
            ProvisionedThroughput: {
                ReadCapacityUnits: 5,
                WriteCapacityUnits: 5
            }
        };

        var tcreated = await new Promise(function(resolve, reject) { 
            _dynoDB.createTable(params, function(err, data) {
                if (err) {
                    console.log('missing table ['+MSG_TABLE+'], creating failed:'+err);
                    resolve(false);
                } else {
                    resolve(true);
                }
            });
        });
        return tcreated;
    }
    return true;        // everything is ok
}


module.exports = { addMsgToTable };