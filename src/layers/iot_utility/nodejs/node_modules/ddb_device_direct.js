// Note to add as a nodejs layer it needs a zip where the .js libs are in /nodejs/node_modules/ or it will not find them.
// dynamoDB Device object table handling functions
var aws  = require('aws-sdk');

let IOT_DEVICE_TABLE='IOT-DEVICES';

var _dynoDB= new aws.DynamoDB({apiVersion: 'latest'});


// Find device with this id in DB 
// Return promise which does the lookup
// Pass attrs as array of string attribute names to limit the returned item size
async function findDevice(id, attrs=undefined) {
    // look up DB to find it
    if (await checkOrCreateDeviceTable()) {
        var params = {
            TableName:IOT_DEVICE_TABLE,
            Key: { 
                'id': {'S':id} 
            },
        };
        if (attrs!==undefined) {
            params.AttributesToGet = attrs;
        }
        console.log('finding:'+JSON.stringify(params));
        return new Promise(function(resolve, reject) {
            _dynoDB.getItem(params, function(err, data) {
                if (err) {
                    console.log('failed to find device'+err);
                    reject(err);
                } else {
                    console.log('found item:'+JSON.stringify(data));
                    resolve(data.Item);
                }
            })    
        });
    } else {
        console.log('failed to find or create DDB table');
        throw new Error('failed to find or create DDB table');
    }
}

async function createDevice(dd) {
    // add to table
    var now = new Date();
    // Build update expression (note don't use AttributeUpdate as docs recommend using UpdateExpression (no reason given...))
    var attrvals = {
        ':da':{ 'S':dd.appTag},
        ':mp':{ 'S':dd.msgProtocol},
        ':ct': { 'S': now.toISOString() }
    };
    var updateExpression ='SET appTag=:da, msgProtocol=:mp, creationTime=:ct'; // id=:id,  
    var params = {
        TableName:IOT_DEVICE_TABLE,
        Key: { 
            'id': {'S':dd.id} 
        },
        ReturnValues : 'ALL_NEW',
        ExpressionAttributeValues : attrvals,
        UpdateExpression : updateExpression
    };
    console.log('updating with:'+JSON.stringify(params));
    return new Promise(function(resolve, reject) {
        _dynoDB.updateItem(params, function(err, data) {
            if (err) {
                console.log('failed to create device'+err);
                reject(err);
            } else {
                console.log('created device'+JSON.stringify(data));
                // Return the new item
                resolve(data.Attributes);
            }
        })    
    });
}

// Update a device already in the table from the attributes in the given param
// Returns the newly updated  Item
async function updateDevice(id, attrs) {
    // update device already in table
    var now = new Date();
    // Build update expression (note don't use AttributeUpdate as docs recommend using UpdateExpression (no reason given...))
    var attrvals = {
        ':ut': { 'S': now.toISOString() }
    };
    var updateExpression ='SET updateTime=:ut'; 
    for (const [key, value] of Object.entries(attrs)) {
        attrvals[':a_'+key] = { 'S' : ''+value };
        updateExpression += ', '+key+'=:a_'+key;
    }
    var params = {
        TableName:IOT_DEVICE_TABLE,
        Key: { 
            'id': {'S':id} 
        },
        ReturnValues : 'ALL_NEW',
        ExpressionAttributeValues : attrvals,
        UpdateExpression : updateExpression
    };
    console.log('updating with:'+JSON.stringify(params));
    return new Promise(function(resolve, reject) {
        _dynoDB.updateItem(params, function(err, data) {
            if (err) {
                console.log('failed to update device['+id+'] due to '+err);
                reject(err);
            } else {
                console.log('updated device['+id+']'+JSON.stringify(data));
                // Return the new item
                resolve(data.Attributes);
            }
        })    
    });
}

async function deleteDevice(id) {
    var params = {
        TableName:IOT_DEVICE_TABLE,
        Key: { 
            'id': {'S':id} 
        },
    };
    console.log('deleting:'+JSON.stringify(params));
    return new Promise(function(resolve, reject) {
        _dynoDB.deleteItem(params, function(err, data) {
            if (err) {
                console.log('failed to delete device['+id+'] due to '+err);
                reject(err);
            } else {
                console.log('deleted device['+id+']');
                resolve(data);
            }
        })    
    });
}

async function listDevices(filter=undefined, attrs=undefined) {
    var params = {
        TableName:IOT_DEVICE_TABLE,
    };
    if (attrs!==undefined) {
        params.AttributesToGet = attrs;
    }
    if (filter!==undefined) {
        var fvals = {};
        var fExpression = []; 
        for (const [key, value] of Object.entries(filter)) {
            fvals[':a_'+key] = { 'S' : ''+value };
            fExpression.push(key+'=:a_'+key);
        }
        params.ExpressionAttributeValues = fvals;
        params.FilterExpression = fExpression.join();
    }
    console.log('listing:'+JSON.stringify(params));
    return new Promise(function(resolve, reject) {
        _dynoDB.scan(params, function(err, data) {
            if (err) {
                console.log('failed to list devices due to '+err);
                reject(err);
            } else {
                console.log('listed '+data.Count+' devices');
                resolve(data.Items);
            }
        })    
    });

}
async function checkOrCreateDeviceTable() {
    var tdesc = await new Promise(function(resolve, reject) { 
        _dynoDB.describeTable({ 'TableName':IOT_DEVICE_TABLE}, function(err, data) {
            if (err) {
                console.log('failed to find table:'+err);
                resolve(null);
            } else resolve(data);
        });
    });
    if (tdesc===null) {
        // Create table structure on the fly TODO
        // Key attributes:
        // primary:'id' : STRING <commtype>-<addr>
        // Create table structure on the fly
        var params = {
            TableName : IOT_DEVICE_TABLE,
            KeySchema: [
                { AttributeName: "id", KeyType: "HASH"}            ],
            AttributeDefinitions: [
                { AttributeName: "id", AttributeType: "S" }
            ],
            ProvisionedThroughput: {
                ReadCapacityUnits: 5,
                WriteCapacityUnits: 5
            }
        };

        var tcreated = await new Promise(function(resolve, reject) { 
            _dynoDB.createTable(params, function(err, data) {
                if (err) {
                    console.log('missing table ['+IOT_DEVICE_TABLE+'], creating failed:'+err);
                    resolve(false);
                } else {
                    resolve(true);
                }
            });
        });
        return tcreated;
    }
    return true;        // everything is ok
}

module.exports = { findDevice, createDevice, updateDevice, deleteDevice, listDevices };
